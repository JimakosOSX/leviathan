---
- name: Update cache
  ansible.builtin.apt:
    update_cache: true

- name: Set a hostname 
  ansible.builtin.hostname:
    name: "{{ server_fqdn }}"
    use: systemd

- name: Install dependencies
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  loop: "{{ packages }}"

- name: Update hosts file
  ansible.builtin.lineinfile:
    path: /etc/hosts
    insertafter: '^127.0.0.1 localhost$'
    line: "{{ ansible_ssh_host }} {{ server_fqdn }} {{ server_name }}"

- name: Check if certificate exists (WWW)
  ansible.builtin.stat:
    path: "/etc/letsencrypt/live/{{ server_www_fqdn }}/cert.pem"
  register: le_cert

- name: Set letsencrypt path (WWW)
  ansible.builtin.set_fact:
    letsencrypt_path: "/etc/letsencrypt/live/{{ server_www_fqdn }}"
  when: le_cert.stat.exists

- name: Check if certificate exists (FQDN)
  ansible.builtin.stat:
    path: "/etc/letsencrypt/live/{{ server_fqdn }}/cert.pem"
  register: le_cert_2
  when: not le_cert.stat.exists 

- name: Set letsencrypt path (FQDN)
  ansible.builtin.set_fact:
    letsencrypt_path: "/etc/letsencrypt/live/{{ server_fqdn }}"
  when: le_cert_2.stat.exists

- name: Stop services for certbot
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: stopped
  loop: "{{ services }}"
  when: not le_cert.stat.exists and not le_cert_2.stat.exists

- name: Generate new certificate if one doesn't exist.
  ansible.builtin.command: "certbot certonly --standalone --noninteractive --agree-tos --email {{ certbot_admin_email }} -d {{ server_www_fqdn }},{{ server_fqdn }}"
  when: not le_cert.stat.exists and not le_cert_2.stat.exists

- name: Postfix configuration (debconf)
  ansible.builtin.debconf:
    name: postfix
    question: "{{ item.question }}"
    value: "{{ item.value }}"
    vtype: string
  loop: "{{ postfix_debconf_params }}"

# This is needed after debconf for the settings to be applied
- name: Apply debconf changes
  ansible.builtin.command: "dpkg-reconfigure -f noninteractive postfix"

- name: Start services
  ansible.builtin.systemd:
    name: "{{ item }}" 
    state: started
    enabled: true
  loop: "{{ services }}"
